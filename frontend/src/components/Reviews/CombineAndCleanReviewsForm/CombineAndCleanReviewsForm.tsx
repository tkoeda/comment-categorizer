import {
    Button,
    Checkbox,
    FileInput,
    Group,
    Select,
    Stack,
    TextInput,
    Title,
} from "@mantine/core";
import { notifications } from "@mantine/notifications";
import { IconUpload } from "@tabler/icons-react";
import React, { useState } from "react";
import api from "../../../api/api";
import { Industry } from "../../../types/types";
interface CombineAndCleanReviewsFormProps {
    industries: Industry[];
}

const CombineAndCleanReviewsForm: React.FC<CombineAndCleanReviewsFormProps> = ({
    industries,
}) => {
    const [industryId, setIndustryId] = useState<number | null>(null);
    const [reviewType, setReviewType] = useState<string>("");
    const [files, setFiles] = useState<File[] | undefined>(undefined);
    const [displayName, setDisplayName] = useState<string>("");
    const [autogenerateDisplayName, setAutogenerateDisplayName] =
        useState<boolean>(true);
    const [isSubmitting, setIsSubmitting] = useState<boolean>(false);
    const resetForm = () => {
        setIndustryId(null);
        setReviewType("");
        setFiles(undefined);
        if (!autogenerateDisplayName) {
            setDisplayName("");
        }
    };

    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        if (isSubmitting || !files) return;

        setIsSubmitting(true);

        const formData = new FormData();
        formData.append("industry_id", industryId!.toString());
        formData.append("review_type", reviewType);
        formData.append("display_name", !autogenerateDisplayName ? displayName : "");
        Array.from(files).forEach((file) => {
            formData.append("files", file);
        });
        console.log();

        try {
            const response = await api.post("/reviews/combine_and_clean", formData);
            notifications.show({
                title: "成功",
                message: response.data.message,
                color: "green",
            });
            // Reset form after successful submission
        } catch (error: any) {
            console.error("Form submission error:", error);

            // Safely format the error message to prevent React rendering errors
            let errorMessage = "An unknown error occurred";

            if (error.response?.data?.detail) {
                if (typeof error.response.data.detail === "string") {
                    // String error message
                    errorMessage = error.response.data.detail;
                } else if (Array.isArray(error.response.data.detail)) {
                    // FastAPI validation error array
                    errorMessage =
                        error.response.data.detail[0]?.msg || "Validation error";
                } else if (typeof error.response.data.detail === "object") {
                    // Object error message - convert to string
                    try {
                        errorMessage = JSON.stringify(error.response.data.detail);
                    } catch {
                        errorMessage = "Error parsing details";
                    }
                }
            } else if (error.message) {
                errorMessage = error.message;
            }

            notifications.show({
                title: "エラー",
                message: errorMessage,
                color: "red",
            });
        } finally {
            resetForm();
            setIsSubmitting(false);
        }
    };

    return (
        <form onSubmit={handleSubmit}>
            <Title order={2} mb="md">
                ステップ1: レビューを一括処理する
            </Title>

            <Stack gap="md">
                <Select
                    label="業界"
                    placeholder="業界を入力してください"
                    data={industries.map((ind) => ({
                        value: ind.id.toString(),
                        label: ind.name,
                    }))}
                    value={industryId ? industryId.toString() : null}
                    onChange={(value) => setIndustryId(value ? Number(value) : null)}
                    required
                    searchable
                    disabled={isSubmitting}
                    clearable
                />

                <Select
                    label="レビュータイプ"
                    placeholder="レビュータイプを選択"
                    data={[
                        { value: "new", label: "新規" },
                        { value: "past", label: "過去" },
                    ]}
                    value={reviewType || null}
                    onChange={(value) => setReviewType(value || "")}
                    required
                    disabled={isSubmitting}
                    clearable
                />

                <FileInput
                    key={reviewType}
                    label="Excelファイルを選択"
                    placeholder="ファイルをアップロード"
                    accept=".xlsx"
                    multiple
                    rightSection={<IconUpload size={14} />}
                    onChange={setFiles}
                    value={files || undefined}
                    required
                    disabled={isSubmitting}
                    clearable
                />

                <Checkbox
                    label="表示名を自動生成する"
                    checked={autogenerateDisplayName}
                    onChange={(event) =>
                        setAutogenerateDisplayName(event.currentTarget.checked)
                    }
                />

                {!autogenerateDisplayName && (
                    <TextInput
                        label="表示名"
                        placeholder="これらのレビューのカスタム表示名を入力してください"
                        value={displayName}
                        onChange={(event) =>
                            setDisplayName(event.currentTarget.value)
                        }
                        disabled={isSubmitting}
                    />
                )}

                <Group justify="center" mt="md">
                    <Button
                        type="submit"
                        loading={isSubmitting}
                        disabled={
                            !industryId || !reviewType || !files || isSubmitting
                        }
                    >
                        レビューを結合・クリーニング
                    </Button>
                </Group>
            </Stack>
        </form>
    );
};

export default CombineAndCleanReviewsForm;
